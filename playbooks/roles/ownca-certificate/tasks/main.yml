---
- name: Create SoftHSM token if doesnt exists already
  block:
    - name: Get slots
      ansible.builtin.command:
        cmd: "softhsm2-util --show-slots"
      register: var_slots

    - name: Set slots fact
      ansible.builtin.set_fact:
        slots: " {{ var_slots.stdout }} "

    - name: Print slots if match
      ansible.builtin.debug:
        msg: "{{ slots }}"
      when: slots is search( token_name )

    - name: Create SoftHSM token
      ansible.builtin.command:
        cmd: "softhsm2-util --init-token --slot 0 --label {{ token_name }} --pin {{ ca_pin }} --so-pin {{ so_pin }}"
      when: so_pin is defined and not slots is search ( token_name )

  become: yes


- name: Create private key and store using HSM
  block:
    - name: Create private key for CA using PKCS#8
      community.crypto.openssl_privatekey:
        path: /etc/pki/CA/private/ca-certificate-key.p8
        passphrase: "{{ secret_ca_passphrase }}"
        cipher: auto
        size: 4096
        type: RSA
        format: pkcs8

    - name: Check if key already stored in token
      ansible.builtin.command:
        cmd: "pkcs11-tool --module /usr/lib/softhsm/libsofthsm2.so -T -O -I"
      register: var_slots_data

    - name: Set slots data fact
      ansible.builtin.set_fact:
        slots_data: " {{ var_slots_data.stdout }} "

    - name: Store key on SoftHSM token
      ansible.builtin.command:
        cmd: "softhsm2-util --file-pin {{ secret_ca_passphrase }} --pin {{ ca_pin }} --import /etc/pki/CA/private/ca-certificate-key.p8 --token {{ token_name }} --id {{ key_id }} --label rsa-privkey"
      when: not var_slots_data is search( key_id )

    - name: Remove key file
      ansible.builtin.file:
        path: /etc/pki/CA/private/ca-certificate-key.p8
        state: absent

  become: yes

# Try with EXPECT
- name: Create CA self signed certificate with HSM
  ansible.builtin.expect:
    command: "openssl req -x509 -days 365 -new -nodes -out /etc/pki/CA/certs/ca-certificate.crt -engine pkcs11 -keyform engine -key {{ key_id }}"
    responses:
      (?i)token:          "{{ ca_pin }}"
      (?i)country:        "{{ country_name }}"
      (?i)state:          "{{ state_or_province_name }}"
      (?i)locality:       "{{ locality_name }}"
      (?i)organization:   "{{ organization_name }}"
      (?i)organizational: "{{ organizational_unit_name }}"
      (?i)common:         "{{ common_name }}"
      (?i)email:          "{{ email_address }}"
  become: yes

- name: Create CA certificate signing request (CSR)
  community.crypto.openssl_csr_pipe:
    privatekey_path: /etc/pki/CA/private/ca-certificate.key
    privatekey_passphrase: "{{ secret_ca_passphrase }}"

    country_name: "{{ country_name }}"
    state_or_province_name: "{{ state_or_province_name }}"
    locality_name: "{{ locality_name }}"
    organization_name: "{{ organization_name }}"
    organizational_unit_name: "{{ organizational_unit_name }}"
    common_name: "{{ common_name }}"
    use_common_name_for_san: false

    basic_constraints: "CA:TRUE"
    basic_constraints_critical: yes
  register: ca_csr
  become: yes
  tags:
    - never

- name: Print CSR
  ansible.builtin.debug:
    msg: "{{ ca_csr }}"
  tags:
    - never

- name: Create CA certificate from CSR
  community.crypto.x509_certificate:
    path: /etc/pki/CA/certs/ca-certificate.crt
    csr_content: "{{ ca_csr.csr }}"
    privatekey_path: /etc/pki/CA/private/ca-certificate.key
    privatekey_passphrase: "{{ secret_ca_passphrase }}"

    selfsigned_not_after: +3650d
    selfsigned_digest: sha256
    provider: selfsigned

    state: present
    return_content: yes
  register: ca_crt
  become: yes
  tags:
    - never

- name: Get CA certificate in control node 
  ansible.builtin.copy:
    content: "{{ ca_crt.certificate }}"
    dest: /tmp/ca.crt
  delegate_to: 127.0.0.1
  tags:
    - never
