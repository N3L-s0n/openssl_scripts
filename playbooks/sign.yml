---
- hosts: clients

  pre_tasks:
    - name: Check if CSR already exists
      ansible.builtin.stat:
        path: /home/{{ ansible_user }}/{{ request.name }}.csr.pem
      register: stat_result

  roles:
    - role: certificate-request # registers new CSR
      when: not stat_result.stat.exists

  post_tasks:
    - name: Save CSR in client
      ansible.builtin.copy:
        content: "{{ client_csr.csr }}"
        dest: /home/{{ ansible_user }}/{{ request.name }}.csr.pem
      when: not stat_result.stat.exists
      become: yes

    - name: Get key file
      ansible.builtin.fetch:
        dest: "/tmp/{{ request.name }}.key"
        src: "/etc/pki/CA/private/{{ request.name }}.key"
        flat: yes
      become: yes

- hosts: issuer
  tasks:
    - name: Check if Certificate already exists
      ansible.builtin.stat:
        path: /etc/pki/CA/certs/{{ request.name }}.cert.pem
      register: stat_result

    - name: Print CSR data
      ansible.builtin.debug:
        msg: "{{ hostvars[groups.clients[0]]['client_csr'].csr }}"
      when: not hostvars[groups.clients[0]]['stat_result'].stat.exists

    - name: Sign certificate signing request (CSR)
      block:
        - name: Save CSR file
          ansible.builtin.copy:
            dest: /etc/pki/CA/certs/{{ request.name }}.csr
            content: "{{ hostvars[groups.clients[0]]['client_csr'].csr }}"
          when: not hostvars[groups.clients[0]]['stat_result'].stat.exists

        - name: Sign with CA certificate
          ansible.builtin.expect:
            command: "sudo openssl ca -config ca.conf -cert certs/{{ ca_name }}.cert.pem -keyfile private/{{ ca_name }}.key -in certs/{{ request.name }}.csr -out certs/{{ request.name }}.cert.pem -extensions extensions"
            chdir: /etc/pki/CA
            responses:
              (?i)pass: "{{ ca_passphrase }}"
              (?i)sign: "y"
              (?i)commit: "y"

      become: yes
      when: not stat_result.stat.exists

    - name: Save private key file temporarily
      ansible.builtin.copy:
        src: "/tmp/{{ request.name }}.key"
        dest: "/tmp/"
      become: yes

    - name: Generate PKCS#12 file
      community.crypto.openssl_pkcs12:
        action: export
        path: /etc/pki/CA/certs/{{ request.name }}.p12
        friendly_name: "{{ request.name }}"
        privatekey_path: /tmp/{{ request.name }}.key
        privatekey_passphrase: "{{ priv_passphrase }}"
        certificate_path: /etc/pki/CA/certs/{{ request.name }}.cert.pem
      become: yes
